<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="9/29/2024 2:32:54 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="ABHIJEETRAJ"
  DTS:CreatorName="ABHIJEETRAJ\abhij"
  DTS:DTSID="{7C3E45EE-4C86-43E9-801C-E91A3AE8387E}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="16.0.5556.0"
  DTS:LocaleID="16393"
  DTS:ObjectName="LoadExcelFilesDynamicExcelFileDataInsert"
  DTS:PackageType="5"
  DTS:VersionBuild="5"
  DTS:VersionGUID="{4C10EC16-06A2-4001-8AA9-CFC7AC06B4E2}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[Conn_DB_TechBrothersIT_New]"
      DTS:CreationName="ADO.NET:System.Data.SqlClient.SqlConnection, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      DTS:DTSID="{6E5551F0-1271-4CB4-8F61-BA3233F8EC73}"
      DTS:ObjectName="Conn_DB_TechBrothersIT_New">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=ABHIJEETRAJ;Initial Catalog=TechBrothersIT;Integrated Security=True;Application Name=SSIS-LoadExcelFilesDynamicExcelFileDataInsert-{6E5551F0-1271-4CB4-8F61-BA3233F8EC73}ABHIJEETRAJ.TechBrothersIT;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{2423FBF1-EF9B-4BE6-80BE-B3CC2349DBDB}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ArchiveFolder">
      <DTS:VariableValue
        DTS:DataType="8">C:\Project\Archive</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{50C608C2-48F4-4EFF-A629-FA502F5D2456}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ColumnsDataType">
      <DTS:VariableValue
        DTS:DataType="8">VARCHAR(MAX)</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{3D7D3B67-34AF-41C8-8B17-72FF232A56B0}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FileExtension">
      <DTS:VariableValue
        DTS:DataType="8">.xlsx</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E4297452-1297-43A7-A8E6-A8EBF6D707D5}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="LogFolder">
      <DTS:VariableValue
        DTS:DataType="8">C:\Project\Log</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{370F252B-1E9E-4C64-8D97-01A98C2A5911}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SchemaName">
      <DTS:VariableValue
        DTS:DataType="8">Staging</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{6768E58A-4710-48C8-84F3-119B11CE4E66}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SourceFolder">
      <DTS:VariableValue
        DTS:DataType="8">C:\Project\Source</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Script Task"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{547A2226-8C43-411B-A7C6-6A9664AEA736}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Script Task"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_b0c1eac16ea045b284370d1af0cb410d"
          VSTAMajorVersion="16"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::ArchiveFolder,User::ColumnsDataType,User::FileExtension,User::LogFolder,User::SchemaName,User::SourceFolder">
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_b0c1eac16ea045b284370d1af0cb410d.Properties.Settings.get_Default():ST_b0c1eac16ea045b284370d1af0cb410d.Properties.Sett" +
    "ings")]

namespace ST_b0c1eac16ea045b284370d1af0cb410d.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ST_b0c1eac16ea045b284370d1af0cb410d.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{395b531e-4434-41f8-beb0-40af261a8f6c}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_b0c1eac16ea045b284370d1af0cb410d</RootNamespace>
    <AssemblyName>ST_b0c1eac16ea045b284370d1af0cb410d</AssemblyName>
    <TargetFrameworkVersion>v4.7.2</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>

  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>

  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
         <Generator>ResXFileCodeGenerator</Generator>
         <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
             <AutoGen>True</AutoGen>
         <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
         <Generator>SettingsSingleFileGenerator</Generator>
         <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
         <AutoGen>True</AutoGen>
         <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
         <SubType>Code</SubType>
    </Compile>
  </ItemGroup>

  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />

  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="ScriptTask"
                           HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}"
                           ApplicationType="usd"
                           Language="cs"
                           TemplatesPath=""
                           DebugInfoCommandLine=""
                           DebugInfoWorkingDir=""
                           IconImageList=""/>
        <Host Name="ScriptTask" GeneratedNamespace="$safeprojectname" IconIndex="">
        </Host>
        <ProjectClient>
            <HostIdentifier>SSIS_ST160</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.IO;
#endregion

namespace ST_b0c1eac16ea045b284370d1af0cb410d
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            string datetime = DateTime.Now.ToString("yyyyMMddHHmmss");
            bool fireAgain = false;

            try
            {
                // Retrieve SSIS variables
                string SourceFolderPath = Dts.Variables["User::SourceFolder"].Value.ToString();
                string FileExtension = Dts.Variables["User::FileExtension"].Value.ToString();
                string ArchiveFolder = Dts.Variables["User::ArchiveFolder"].Value.ToString();
                string SchemaName = Dts.Variables["User::SchemaName"].Value.ToString();
                string LogFolder = Dts.Variables["User::LogFolder"].Value.ToString();

                // SQL Connection setup
                SqlConnection sqlConnection = (SqlConnection)(Dts.Connections["Conn_DB_TechBrothersIT_New"].AcquireConnection(Dts.Transaction) as SqlConnection);

                // Loop through each Excel file in the source folder
                string[] fileEntries = Directory.GetFiles(SourceFolderPath, "*" + FileExtension);
                foreach (string fileName in fileEntries)
                {
                    Dts.Events.FireInformation(0, "Processing File", $"Processing file: {fileName}", "", 0, ref fireAgain);

                    // Create Excel connection string dynamically for each file
                    string excelConnectionString = $"Provider=Microsoft.ACE.OLEDB.16.0;Data Source={fileName};Extended Properties='Excel 12.0 Xml;HDR=YES;'";

                    using (OleDbConnection excelConnection = new OleDbConnection(excelConnectionString))
                    {
                        excelConnection.Open();

                        // Retrieve the schema to get sheet names
                        DataTable dtSheet = excelConnection.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);

                        if (dtSheet == null || dtSheet.Rows.Count == 0)
                        {
                            throw new Exception("No sheets found in the Excel file.");
                        }

                        // Loop through all sheets in the Excel file
                        foreach (DataRow row in dtSheet.Rows)
                        {
                            string sheetName = row["TABLE_NAME"].ToString();

                            // Clean up the sheet name if necessary
                            if (sheetName.EndsWith("$"))
                            {
                                sheetName = sheetName.Substring(0, sheetName.Length - 1);
                            }

                            // Build the query to extract data from the sheet
                            string excelQuery = $"SELECT * FROM [{sheetName}$]";
                            using (OleDbCommand excelCommand = new OleDbCommand(excelQuery, excelConnection))
                            using (OleDbDataReader excelReader = excelCommand.ExecuteReader())
                            {
                                // Generate the SQL table name from the file name (without extension)
                                string TableName = Path.GetFileNameWithoutExtension(fileName);

                                // Generate the create table query dynamically based on the Excel sheet
                                string createTableQuery = GenerateCreateTableQuery(SchemaName, TableName, excelReader);
                                SqlCommand createTableCmd = new SqlCommand(createTableQuery, sqlConnection);
                                createTableCmd.ExecuteNonQuery();

                                // Insert data into SQL table from Excel
                                while (excelReader.Read())
                                {
                                    string insertQuery = GenerateInsertQuery(SchemaName, TableName, excelReader);
                                    SqlCommand insertCommand = new SqlCommand(insertQuery, sqlConnection);
                                    insertCommand.ExecuteNonQuery();
                                }
                            }
                        }
                    }

                    // Close and release the file before moving
                    GC.Collect();
                    GC.WaitForPendingFinalizers();

                    // Move processed file to archive folder
                    File.Move(fileName, ArchiveFolder + "\\" + Path.GetFileNameWithoutExtension(fileName) + "_" + datetime + FileExtension);
                }

                // Mark task as successful
                Dts.TaskResult = (int)ScriptResults.Success;
            }
            catch (Exception ex)
            {
                // Log the error
                string logFolder = Dts.Variables["User::LogFolder"].Value.ToString();
                string logFilePath = Path.Combine(logFolder, $"ErrorLog_{datetime}.log");

                using (StreamWriter sw = File.CreateText(logFilePath))
                {
                    sw.WriteLine(ex.ToString());
                }

                Dts.Events.FireError(0, "Error in Excel to SQL Task", $"Error: {ex.Message}. See log file: {logFilePath}", "", 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

        // Method to generate the SQL create table query dynamically
        private string GenerateCreateTableQuery(string schemaName, string tableName, OleDbDataReader reader)
        {
            DataTable schemaTable = reader.GetSchemaTable();
            string createTableQuery = $"IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '{schemaName}' AND TABLE_NAME = '{tableName}') BEGIN ";
            createTableQuery += $"CREATE TABLE [{schemaName}].[{tableName}] (";

            for (int i = 0; i < schemaTable.Rows.Count; i++)
            {
                string columnName = schemaTable.Rows[i]["ColumnName"].ToString();
                createTableQuery += $"[{columnName}] NVARCHAR(MAX)";
                if (i < schemaTable.Rows.Count - 1)
                    createTableQuery += ", ";
            }

            createTableQuery += ") END";
            return createTableQuery;
        }


        // Method to generate the SQL insert query dynamically based on Excel data
        private string GenerateInsertQuery(string schemaName, string tableName, OleDbDataReader reader)
        {
            // Assume the first column is a unique key (modify according to your unique key logic)
            string uniqueColumnName = reader.GetName(0); // Change the index based on which column is the unique identifier
            string uniqueColumnValue = reader[0].ToString().Replace("'", "''"); // Get the unique value from the first column

            // Build a check query to see if the record already exists based on the unique column
            string checkQuery = $"IF NOT EXISTS (SELECT 1 FROM [{schemaName}].[{tableName}] WHERE [{uniqueColumnName}] = '{uniqueColumnValue}') ";

            // Build the insert query if the record does not exist
            string insertQuery = "BEGIN INSERT INTO [" + schemaName + "].[" + tableName + "] VALUES (";

            for (int i = 0; i < reader.FieldCount; i++)
            {
                insertQuery += $"'{reader[i].ToString().Replace("'", "''")}'";
                if (i < reader.FieldCount - 1)
                    insertQuery += ", ";
            }

            insertQuery += ") END";

            return checkQuery + insertQuery;
        }


        // Enum to specify task result (success/failure)
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:Language>msBuild</msb:Language>
    <msb:CodeName>ST_b0c1eac16ea045b284370d1af0cb410d</msb:CodeName>
    <msb:DisplayName>ST_b0c1eac16ea045b284370d1af0cb410d</msb:DisplayName>
    <msb:ProjectId>{5364E54F-94D9-47B1-B94B-084792BF22BD}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_b0c1eac16ea045b284370d1af0cb410d.csproj" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_b0c1eac16ea045b284370d1af0cb410d")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_b0c1eac16ea045b284370d1af0cb410d")]
[assembly: AssemblyCopyright("Copyright @  2024")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_b0c1eac16ea045b284370d1af0cb410d.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_b0c1eac16ea045b284370d1af0cb410d.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_b0c1eac16ea045b284370d1af0cb410d.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_b0c1eac16ea045b284370d1af0cb410d.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_b0c1eac16ea045b284370d1af0cb410d.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_b0c1eac16ea045b284370d1af0cb410d.dll">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
DgDuAT4ADgBoCD4ABgAZBA0ADgCrABEIDgChAL8FDgDhBb8FBgAKANMEBgBAAQ0ABgBKBg0ABgCd
AdMEBgAcAdMEBgB0CGEFAAAAAAEAAAAAAAEAAQABABAA8ARlADkAAQABAAAAEADABhwHbQABAAUA
AAEQAGkHHAeBAAMACQADAQAAvgcAAGUABAAMABEA3wRqAREAwgFuAREAvgByAQYGNgB2AVaArgd5
AVaAogF5AVAgAAAAAIYA9gQGAAEAeCQAAAAAgQB9CH0BAQBYJQAAAACBAKYIfQEEAGcmAAAAAIYY
eQYGAAcAbyYAAAAAgxh5BgYABwB3JgAAAACTCAMGhQEHAKMmAAAAAJMIqgGKAQcAqiYAAAAAkwi2
AY8BBwCyJgAAAACWCPYHlQEIALkmAAAAAIYYeQYGAAgAwSYAAAAAkRh/BuQACAAAAAEARQEAAAIA
UAEAAAMA/AUAAAEARQEAAAIAUAEAAAMA/AUAAAEA4QMJAHkGAQARAHkGBgAZAHkGCgApAHkGEAAx
AHkGEAA5AHkGEABBAHkGEABJAHkGEABRAHkGEABZAHkGEABhAHkGEABpAHkGBgDRAHkGBgD5AHkG
FQAJAXkGBgB5AGAIPgB5AAYEQwBxALYHSAARAVIHTgAZAcoEVAAhAdcDWwDZAAYEXwARAYUHYwAp
AcoEaQARAVEFWwAxAZUFcAA5AeAHdQBBAWAHewARAcwHggBJARcFiAA5AeAHkwCJAHkGEABRAesE
BgBZAUsHmgCJANoAnwCRANcHqQBxATMIrwC5AHkGEABxAWsGswCZACcIWwB5AcoEuAA5ASkEvQA5
AR4ErwA5AQ8EwgChAHkGyAChAO4FzwCBAfsE1ACJAXkG2QCRAZYIrwCZAYkA4ACxACECBgCZAEwI
4AChAe4H5AChAZUH5AA5AeAH6ACpAecD7gARAQIIAQCBAZUBdQCpAVUI9ACxAYsBEAC5AM4AXwA5
AeAH+gBJAVUGAgGZAe4AEwFpAcoEGAGZAVoBJwGZAcoELAE5AbYAMQGZAT0IrwBxAHkGBgDZAHkG
BgC5AS4BNwG5AXAIQAHhAHkGRgEBAXkGBgAIABQAYAEIABgAZQEpAHMA0QEuAAsAqQEuABMAsgEu
ABsA0QEuACMA2gEuACsAAwIuADMAAwIuADsAAwIuAEMA2gEuAEsACQIuAFMAAwIuAFsAIAJDAGMA
ZQFJAHMA0QFhAHsAZQFjAGsAZQEbAAsBHwEDAAEABAADAAAABwaaAQAAygGfAQAA+gekAQIABgAD
AAIABwAFAAEACAAFAAIACQAHAASAAAABAAAATiOnZwAAAAAAAGUAAAAEAAAAAAAAAAAAAABOAVwA
AAAAABAAAAAAAAAAAAAAAFcBMgQAAAAABAAAAAAAAAAAAAAATgE+AAAAAAAEAAAAAAAAAAAAAABO
AdMEAAAAABAAAAAAAAAAAAAAAFcBFwAAAAAAAAAAAAEAAADKBgAABQACAAAAADxNb2R1bGU+AEdD
AFN5c3RlbS5JTwBNaWNyb3NvZnQuU3FsU2VydmVyLk1hbmFnZWREVFMAdmFsdWVfXwBTeXN0ZW0u
RGF0YQBTeXN0ZW0uRGF0YS5PbGVEYgBtc2NvcmxpYgBTVF9iMGMxZWFjMTZlYTA0NWIyODQzNzBk
MWFmMGNiNDEwZABSZWFkAE9sZURiU2NoZW1hR3VpZABPbGVEYkNvbW1hbmQAU3FsQ29tbWFuZABS
ZXBsYWNlAGRlZmF1bHRJbnN0YW5jZQBnZXRfTWVzc2FnZQBHZXRPbGVEYlNjaGVtYVRhYmxlAEdl
dFNjaGVtYVRhYmxlAERhdGFUYWJsZQBWYXJpYWJsZQBJRGlzcG9zYWJsZQBSdW50aW1lVHlwZUhh
bmRsZQBHZXRUeXBlRnJvbUhhbmRsZQBGaWxlAHNjaGVtYU5hbWUAdGFibGVOYW1lAEdldE5hbWUA
RGF0ZVRpbWUATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZQBXcml0ZUxpbmUAQ29tYmlu
ZQBUeXBlAEZhaWx1cmUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAcmVzb3VyY2VDdWx0dXJlAFZT
VEFSVFNjcmlwdE9iamVjdE1vZGVsQmFzZQBJbnRlcm5hbERhdGFDb2xsZWN0aW9uQmFzZQBBcHBs
aWNhdGlvblNldHRpbmdzQmFzZQBEaXNwb3NlAEVkaXRvckJyb3dzYWJsZVN0YXRlAENvbXBpbGVy
R2VuZXJhdGVkQXR0cmlidXRlAERlYnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1dGUARGVidWdnYWJs
ZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUAQXNzZW1ibHlUaXRsZUF0dHJpYnV0
ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBUYXJnZXRGcmFtZXdvcmtBdHRyaWJ1dGUAQXNz
ZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1dGUA
Q29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRyaWJ1dGUA
QXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAU1NJU1NjcmlwdFRhc2tFbnRyeVBvaW50QXR0cmli
dXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0
ZQBnZXRfVmFsdWUAdmFsdWUATW92ZQBTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5nAFRvU3RyaW5n
AFN1YnN0cmluZwBQYXRoAGdldF9MZW5ndGgARW5kc1dpdGgATWljcm9zb2Z0LlNxbFNlcnZlci5T
Y3JpcHRUYXNrAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sAU2NyaXB0
T2JqZWN0TW9kZWwAU3lzdGVtLkNvbXBvbmVudE1vZGVsAFNUX2IwYzFlYWMxNmVhMDQ1YjI4NDM3
MGQxYWYwY2I0MTBkLmRsbABnZXRfSXRlbQBTeXN0ZW0ARW51bQByZXNvdXJjZU1hbgBPcGVuAFNj
cmlwdE1haW4AR2V0RmlsZU5hbWVXaXRob3V0RXh0ZW5zaW9uAEZpcmVJbmZvcm1hdGlvbgBTeXN0
ZW0uQ29uZmlndXJhdGlvbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBnZXRfVHJhbnNhY3Rpb24AU3lz
dGVtLlJlZmxlY3Rpb24ARGF0YVJvd0NvbGxlY3Rpb24AT2xlRGJDb25uZWN0aW9uAEFjcXVpcmVD
b25uZWN0aW9uAFNxbENvbm5lY3Rpb24ARXhjZXB0aW9uAFN5c3RlbS5EYXRhLkNvbW1vbgBDdWx0
dXJlSW5mbwBPbGVEYkRhdGFSZWFkZXIARXhlY3V0ZVJlYWRlcgByZWFkZXIAZ2V0X1Jlc291cmNl
TWFuYWdlcgBDb25uZWN0aW9uTWFuYWdlcgBFdmVudHNPYmplY3RXcmFwcGVyAFN0cmVhbVdyaXRl
cgBUZXh0V3JpdGVyAEZpcmVFcnJvcgBJRW51bWVyYXRvcgBHZXRFbnVtZXJhdG9yAC5jdG9yAC5j
Y3RvcgBTeXN0ZW0uRGlhZ25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBT
eXN0ZW0uUmVzb3VyY2VzAFNUX2IwYzFlYWMxNmVhMDQ1YjI4NDM3MGQxYWYwY2I0MTBkLlByb3Bl
cnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBTVF9iMGMxZWFjMTZlYTA0
NWIyODQzNzBkMWFmMGNiNDEwZC5Qcm9wZXJ0aWVzAFRhYmxlcwBnZXRfVmFyaWFibGVzAEdldEZp
bGVzAFNldHRpbmdzAFN5c3RlbS5Db2xsZWN0aW9ucwBnZXRfQ29ubmVjdGlvbnMAV2FpdEZvclBl
bmRpbmdGaW5hbGl6ZXJzAFN1Y2Nlc3MAZ2V0X0R0cwBTY3JpcHRSZXN1bHRzAGdldF9FdmVudHMA
Z2V0X1Jvd3MAQ29uY2F0AE9iamVjdABDb2xsZWN0AGdldF9EZWZhdWx0AHNldF9UYXNrUmVzdWx0
AFN5c3RlbS5EYXRhLlNxbENsaWVudABnZXRfQ3VycmVudABnZXRfQ291bnQAZ2V0X0ZpZWxkQ291
bnQATW92ZU5leHQAQ3JlYXRlVGV4dABnZXRfTm93AERhdGFSb3cAZ2V0X0Fzc2VtYmx5AEdlbmVy
YXRlQ3JlYXRlVGFibGVRdWVyeQBFeGVjdXRlTm9uUXVlcnkAR2VuZXJhdGVJbnNlcnRRdWVyeQBE
aXJlY3RvcnkAAB15AHkAeQB5AE0ATQBkAGQASABIAG0AbQBzAHMAACVVAHMAZQByADoAOgBTAG8A
dQByAGMAZQBGAG8AbABkAGUAcgAAJ1UAcwBlAHIAOgA6AEYAaQBsAGUARQB4AHQAZQBuAHMAaQBv
AG4AACdVAHMAZQByADoAOgBBAHIAYwBoAGkAdgBlAEYAbwBsAGQAZQByAAAhVQBzAGUAcgA6ADoA
UwBjAGgAZQBtAGEATgBhAG0AZQAAH1UAcwBlAHIAOgA6AEwAbwBnAEYAbwBsAGQAZQByAAA1QwBv
AG4AbgBfAEQAQgBfAFQAZQBjAGgAQgByAG8AdABoAGUAcgBzAEkAVABfAE4AZQB3AAADKgAAH1AA
cgBvAGMAZQBzAHMAaQBuAGcAIABGAGkAbABlAAAjUAByAG8AYwBlAHMAcwBpAG4AZwAgAGYAaQBs
AGUAOgAgAAABAF1QAHIAbwB2AGkAZABlAHIAPQBNAGkAYwByAG8AcwBvAGYAdAAuAEEAQwBFAC4A
TwBMAEUARABCAC4AMQA2AC4AMAA7AEQAYQB0AGEAIABTAG8AdQByAGMAZQA9AABdOwBFAHgAdABl
AG4AZABlAGQAIABQAHIAbwBwAGUAcgB0AGkAZQBzAD0AJwBFAHgAYwBlAGwAIAAxADIALgAwACAA
WABtAGwAOwBIAEQAUgA9AFkARQBTADsAJwABRU4AbwAgAHMAaABlAGUAdABzACAAZgBvAHUAbgBk
ACAAaQBuACAAdABoAGUAIABFAHgAYwBlAGwAIABmAGkAbABlAC4AABVUAEEAQgBMAEUAXwBOAEEA
TQBFAAADJAAAH1MARQBMAEUAQwBUACAAKgAgAEYAUgBPAE0AIABbAAAFJABdAAADXAAAA18AABNF
AHIAcgBvAHIATABvAGcAXwAACS4AbABvAGcAADVFAHIAcgBvAHIAIABpAG4AIABFAHgAYwBlAGwA
IAB0AG8AIABTAFEATAAgAFQAYQBzAGsAAA9FAHIAcgBvAHIAOgAgAAAhLgAgAFMAZQBlACAAbABv
AGcAIABmAGkAbABlADoAIAAAgJtJAEYAIABOAE8AVAAgAEUAWABJAFMAVABTACAAKABTAEUATABF
AEMAVAAgACoAIABGAFIATwBNACAASQBOAEYATwBSAE0AQQBUAEkATwBOAF8AUwBDAEgARQBNAEEA
LgBUAEEAQgBMAEUAUwAgAFcASABFAFIARQAgAFQAQQBCAEwARQBfAFMAQwBIAEUATQBBACAAPQAg
ACcAASknACAAQQBOAEQAIABUAEEAQgBMAEUAXwBOAEEATQBFACAAPQAgACcAARMnACkAIABCAEUA
RwBJAE4AIAABHUMAUgBFAEEAVABFACAAVABBAEIATABFACAAWwAAB10ALgBbAAAHXQAgACgAABVD
AG8AbAB1AG0AbgBOAGEAbQBlAAADWwAAH10AIABOAFYAQQBSAEMASABBAFIAKABNAEEAWAApAAAF
LAAgAAALKQAgAEUATgBEAAADJwABBScAJwABPUkARgAgAE4ATwBUACAARQBYAEkAUwBUAFMAIAAo
AFMARQBMAEUAQwBUACAAMQAgAEYAUgBPAE0AIABbAAATXQAgAFcASABFAFIARQAgAFsAAAtdACAA
PQAgACcAAQcnACkAIAABJ0IARQBHAEkATgAgAEkATgBTAEUAUgBUACAASQBOAFQATwAgAFsAABVd
ACAAVgBBAEwAVQBFAFMAIAAoAABxUwBUAF8AYgAwAGMAMQBlAGEAYwAxADYAZQBhADAANAA1AGIA
MgA4ADQAMwA3ADAAZAAxAGEAZgAwAGMAYgA0ADEAMABkAC4AUAByAG8AcABlAHIAdABpAGUAcwAu
AFIAZQBzAG8AdQByAGMAZQBzAADjQPUBXzvQR4/0JIkiN2I2AAQgAQEIAyAAAQUgAQEREQQgAQEO
BSABARF5IgcVDgIRPQ4ODhJBHQ4IDhJFEkkSTQ4SURJVDhJZEl0OEmEEAAARPQQgAQ4OBSAAEoCJ
BSAAEoCNBiABEoCRHAMgABwDIAAOBSAAEoCVBiABEoCZHAQgARwcBQACDg4OBgACHQ4ODgUgABKA
pQogBgEIDg4OCBACBgADDg4ODgQGEYCxCSACEkkRgLEdHAUgABKAtQMgAAgEIAASTQQgARwOBCAB
Ag4FIAIOCAgGIAIBDhJFBCAAElUEAAEODgYgAgEOEkEDIAACAwAAAQUAAQ4dDgUAAgEODgUAARJh
DgcABA4ODg4OCCAFAggODg4IBwcEEkkOCA4EIAASSQYgARKAvQgHBwUODg4OCAQgAQ4IBCABHAgF
IAIODg4IAAESgN0RgOEFIAASgOUHIAIBDhKA5Qi3elxWGTTgiQiJhF3NgIDMkQQAAAAABAEAAAAD
BhJxAwYSdQMGEhACBggDBhEUByADDg4OElUEAAAScQQAABJ1BQABARJ1BAAAEhAECAAScQQIABJ1
BAgAEhAIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEAAgAAAAAAKAEA
I1NUX2IwYzFlYWMxNmVhMDQ1YjI4NDM3MGQxYWYwY2I0MTBkAAAFAQAAAAAWAQARQ29weXJpZ2h0
IEAgIDIwMjQAAE0BABwuTkVURnJhbWV3b3JrLFZlcnNpb249djQuNy4yAQBUDhRGcmFtZXdvcmtE
aXNwbGF5TmFtZRQuTkVUIEZyYW1ld29yayA0LjcuMgAAtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0u
UmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0
dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291
cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAANg+AAAAAAAAAAAA
API+AAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAADkPgAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1z
Y29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQ
AAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhA
AAAaBAAAAAAAAAAAAAAaBDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv
/gAAAQAAAAEAp2dOIwAAAQCnZ04jPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYA
YQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAA
ALAEegMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAVgMAAAEAMAAwADAAMAAwADQA
YgAwAAAAGgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBuAHkATgBh
AG0AZQAAAAAAAAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAFQA
XwBiADAAYwAxAGUAYQBjADEANgBlAGEAMAA0ADUAYgAyADgANAAzADcAMABkADEAYQBmADAAYwBi
ADQAMQAwAGQAAAA+AA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4AOQAwADMA
OAAuADIANgA1ADMANQAAAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQAXwBi
ADAAYwAxAGUAYQBjADEANgBlAGEAMAA0ADUAYgAyADgANAAzADcAMABkADEAYQBmADAAYwBiADQA
MQAwAGQALgBkAGwAbAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBw
AHkAcgBpAGcAaAB0ACAAQAAgACAAMgAwADIANAAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUA
bQBhAHIAawBzAAAAAAAAAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAA
AFMAVABfAGIAMABjADEAZQBhAGMAMQA2AGUAYQAwADQANQBiADIAOAA0ADMANwAwAGQAMQBhAGYA
MABjAGIANAAxADAAZAAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABT
AFQAXwBiADAAYwAxAGUAYQBjADEANgBlAGEAMAA0ADUAYgAyADgANAAzADcAMABkADEAYQBmADAA
YwBiADQAMQAwAGQAAABCAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAu
ADkAMAAzADgALgAyADYANQAzADUAAAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMA
aQBvAG4AAAAxAC4AMAAuADkAMAAzADgALgAyADYANQAzADUAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAMAAAABD8AAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="134,42"
          Id="Package\Script Task"
          TopLeft="456,108" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>