<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="9/29/2024 3:26:07 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="ABHIJEETRAJ"
  DTS:CreatorName="ABHIJEETRAJ\abhij"
  DTS:DTSID="{F66F558B-467F-44F7-8CAF-DCB663FC09F3}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="16.0.5556.0"
  DTS:LocaleID="16393"
  DTS:ObjectName="LoadExcelDataInSqlOneTableInsert"
  DTS:PackageType="5"
  DTS:VersionBuild="6"
  DTS:VersionGUID="{4E6EEDDD-B91C-4CA6-ABBD-CD631100FB0C}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[Conn_DB_TechBrothersIT]"
      DTS:CreationName="ADO.NET:System.Data.SqlClient.SqlConnection, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      DTS:DTSID="{117F7D35-6C5D-4183-99C5-D1AA9D0A1AAB}"
      DTS:ObjectName="Conn_DB_TechBrothersIT">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=ABHIJEETRAJ;Initial Catalog=TechBrothersIT;Integrated Security=True;Application Name=SSIS-LoadExcelDataInSqlOneTableInsert-{117F7D35-6C5D-4183-99C5-D1AA9D0A1AAB}ABHIJEETRAJ.TechBrothersIT;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{93A789FB-1590-40E4-A65C-C1D22A6D34C7}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ArchiveFolder">
      <DTS:VariableValue
        DTS:DataType="8">C:\Project\Archive</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{ED6041A1-E277-457C-BD81-5A23E3F49833}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ColumnsDataType">
      <DTS:VariableValue
        DTS:DataType="8">VARCHAR(MAX)</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{467ECB35-DC30-4A91-81FB-241D7F9DE7C2}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FileExtension">
      <DTS:VariableValue
        DTS:DataType="8">.xlsx</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{DDCF0A0D-2840-410C-89B7-602EBEABC722}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="LogFolder">
      <DTS:VariableValue
        DTS:DataType="8">C:\Project\Log</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{32BFD30A-C68B-4064-BAF6-7390FBB4C5E4}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SchemaName">
      <DTS:VariableValue
        DTS:DataType="8">Staging</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{8BCA00F6-C77B-4C62-AB15-05CBAA796205}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SourceFolder">
      <DTS:VariableValue
        DTS:DataType="8">C:\Project\Source</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Script Task"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{A654B820-A3E4-48F5-B05B-913BF9619E34}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Script Task"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_2b9a32b8115e4adbb0e11e15adde35c5"
          VSTAMajorVersion="16"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::ArchiveFolder,User::ColumnsDataType,User::FileExtension,User::LogFolder,User::SchemaName,User::SourceFolder">
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_2b9a32b8115e4adbb0e11e15adde35c5.Properties.Settings.get_Default():ST_2b9a32b8115e4adbb0e11e15adde35c5.Properties.Sett" +
    "ings")]

namespace ST_2b9a32b8115e4adbb0e11e15adde35c5.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.IO;
#endregion

namespace ST_2b9a32b8115e4adbb0e11e15adde35c5
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            string datetime = DateTime.Now.ToString("yyyyMMddHHmmss");
            bool fireAgain = false;

            try
            {
                // Retrieve SSIS variables
                string SourceFolderPath = Dts.Variables["User::SourceFolder"].Value.ToString();
                string FileExtension = Dts.Variables["User::FileExtension"].Value.ToString();
                string ArchiveFolder = Dts.Variables["User::ArchiveFolder"].Value.ToString();
                string SchemaName = Dts.Variables["User::SchemaName"].Value.ToString();
                string LogFolder = Dts.Variables["User::LogFolder"].Value.ToString();

                // Static table name (replace with your actual table name)
                string staticTableName = "YourStaticTableTest"; // Use the table name that already exists in your database

                // SQL Connection setup
                SqlConnection sqlConnection = (SqlConnection)(Dts.Connections["Conn_DB_TechBrothersIT"].AcquireConnection(Dts.Transaction) as SqlConnection);

                // Loop through each Excel file in the source folder
                string[] fileEntries = Directory.GetFiles(SourceFolderPath, "*" + FileExtension);
                foreach (string fileName in fileEntries)
                {
                    Dts.Events.FireInformation(0, "Processing File", $"Processing file: {fileName}", "", 0, ref fireAgain);

                    // Create Excel connection string dynamically for each file
                    string excelConnectionString = $"Provider=Microsoft.ACE.OLEDB.16.0;Data Source={fileName};Extended Properties='Excel 12.0 Xml;HDR=YES;'";

                    using (OleDbConnection excelConnection = new OleDbConnection(excelConnectionString))
                    {
                        excelConnection.Open();

                        // Retrieve the schema to get sheet names
                        DataTable dtSheet = excelConnection.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);

                        if (dtSheet == null || dtSheet.Rows.Count == 0)
                        {
                            throw new Exception("No sheets found in the Excel file.");
                        }

                        // Loop through all sheets in the Excel file
                        foreach (DataRow row in dtSheet.Rows)
                        {
                            string sheetName = row["TABLE_NAME"].ToString();

                            // Clean up the sheet name if necessary (remove '$' and other invalid characters)
                            if (sheetName.EndsWith("$"))
                            {
                                sheetName = sheetName.Substring(0, sheetName.Length - 1);
                            }

                            Dts.Events.FireInformation(0, "Processing Sheet", $"Processing sheet: {sheetName} and inserting into table: {staticTableName}", "", 0, ref fireAgain);

                            // Build the query to extract data from the sheet
                            string excelQuery = $"SELECT * FROM [{sheetName}$]";
                            using (OleDbCommand excelCommand = new OleDbCommand(excelQuery, excelConnection))
                            using (OleDbDataReader excelReader = excelCommand.ExecuteReader())
                            {
                                // Check if the table exists, and if not, create it
                                EnsureTableExists(SchemaName, staticTableName, excelReader, sqlConnection);

                                // Insert data into the static SQL table from Excel
                                while (excelReader.Read())
                                {
                                    string uniqueColumnName = excelReader.GetName(0); // Assuming the first column is unique
                                    string uniqueColumnValue = excelReader[0].ToString().Replace("'", "''");

                                    // Check if the record exists in the table
                                    if (!CheckIfRecordExists(SchemaName, staticTableName, uniqueColumnName, uniqueColumnValue, sqlConnection))
                                    {
                                        // If the record doesn't exist, insert it
                                        string insertQuery = GenerateInsertQuery(SchemaName, staticTableName, excelReader);
                                        SqlCommand insertCommand = new SqlCommand(insertQuery, sqlConnection);
                                        insertCommand.ExecuteNonQuery();
                                    }
                                    else
                                    {
                                        Dts.Events.FireInformation(0, "Duplicate Record", $"Record with {uniqueColumnName} = {uniqueColumnValue} already exists.", "", 0, ref fireAgain);
                                    }
                                }
                            }
                        }
                    }

                    // Close and release the file before moving
                    GC.Collect();
                    GC.WaitForPendingFinalizers();

                    // Move processed file to archive folder
                    File.Move(fileName, ArchiveFolder + "\\" + Path.GetFileNameWithoutExtension(fileName) + "_" + datetime + FileExtension);
                }

                // Mark task as successful
                Dts.TaskResult = (int)ScriptResults.Success;
            }
            catch (Exception ex)
            {
                // Log the error
                string logFolder = Dts.Variables["User::LogFolder"].Value.ToString();
                string logFilePath = Path.Combine(logFolder, $"ErrorLog_{datetime}.log");

                using (StreamWriter sw = File.CreateText(logFilePath))
                {
                    sw.WriteLine(ex.ToString());
                }

                Dts.Events.FireError(0, "Error in Excel to SQL Task", $"Error: {ex.Message}. See log file: {logFilePath}", "", 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

        // Method to check if a record already exists in the table
        private bool CheckIfRecordExists(string schemaName, string tableName, string uniqueColumnName, string uniqueColumnValue, SqlConnection sqlConnection)
        {
            string checkQuery = $"SELECT COUNT(1) FROM [{schemaName}].[{tableName}] WHERE [{uniqueColumnName}] = @UniqueValue";
            SqlCommand checkCommand = new SqlCommand(checkQuery, sqlConnection);
            checkCommand.Parameters.AddWithValue("@UniqueValue", uniqueColumnValue);

            int count = Convert.ToInt32(checkCommand.ExecuteScalar());
            return count > 0;
        }

        // Method to check if a table exists, and if not, create it based on Excel schema
        private void EnsureTableExists(string schemaName, string tableName, OleDbDataReader reader, SqlConnection sqlConnection)
        {
            // Check if table exists
            string checkTableQuery = $"IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '{schemaName}' AND TABLE_NAME = '{tableName}') " +
                                     $"BEGIN CREATE TABLE [{schemaName}].[{tableName}] (";

            DataTable schemaTable = reader.GetSchemaTable();
            for (int i = 0; i < schemaTable.Rows.Count; i++)
            {
                string columnName = schemaTable.Rows[i]["ColumnName"].ToString();
                checkTableQuery += $"[{columnName}] NVARCHAR(MAX)";

                if (i < schemaTable.Rows.Count - 1)
                {
                    checkTableQuery += ", ";
                }
            }

            checkTableQuery += ") END";

            // Execute the query to create the table if it does not exist
            SqlCommand createTableCmd = new SqlCommand(checkTableQuery, sqlConnection);
            createTableCmd.ExecuteNonQuery();
        }

        // Method to generate the SQL insert query dynamically based on Excel data
        private string GenerateInsertQuery(string schemaName, string tableName, OleDbDataReader reader)
        {
            string insertQuery = $"INSERT INTO [{schemaName}].[{tableName}] VALUES (";

            for (int i = 0; i < reader.FieldCount; i++)
            {
                insertQuery += $"'{reader[i].ToString().Replace("'", "''")}'";
                if (i < reader.FieldCount - 1)
                    insertQuery += ", ";
            }

            insertQuery += ")";
            return insertQuery;
        }

        // Enum to specify task result (success/failure)
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        }

    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_2b9a32b8115e4adbb0e11e15adde35c5.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_2b9a32b8115e4adbb0e11e15adde35c5.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_2b9a32b8115e4adbb0e11e15adde35c5.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_2b9a32b8115e4adbb0e11e15adde35c5.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_2b9a32b8115e4adbb0e11e15adde35c5.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_2b9a32b8115e4adbb0e11e15adde35c5</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_2b9a32b8115e4adbb0e11e15adde35c5</msb:DisplayName>
    <msb:ProjectId>{74F6FFC1-E708-4C35-BD40-3F83B8A5DB2D}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_2b9a32b8115e4adbb0e11e15adde35c5.csproj" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_2b9a32b8115e4adbb0e11e15adde35c5")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_2b9a32b8115e4adbb0e11e15adde35c5")]
[assembly: AssemblyCopyright("Copyright @  2024")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="ST_2b9a32b8115e4adbb0e11e15adde35c5.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{B4455E2F-08C5-460A-8755-7F9347558002}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_2b9a32b8115e4adbb0e11e15adde35c5</RootNamespace>
    <AssemblyName>ST_2b9a32b8115e4adbb0e11e15adde35c5</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST160</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <BinaryItem
            Name="ST_2b9a32b8115e4adbb0e11e15adde35c5.dll">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
dgAOAEkGdgAGABgBCwUGABIGCwUGALUGOQAGABIFCwUGAHIC/gYGAJQICwUGAHIGMQcGAC8GdAUS
AEICxAQSAKMCxAQSACICXwUGAFcCEQcKALIEiQQWAM4HhAEWAA8BhAEWAAEIhAEWAIIGhAEGAEAE
CwUGAFYJOQAKAJQGiQQOANcFHAYOAJYAdgAGAKEACwUOAMIFagAOAAcCagAOAB0JagAOAEwGHAYO
ALMAvggOAKkAHAYGADYACwUGAFEEOQAGAEgBOQAGAMIGOQAOAKsFvggOAKgGvggGAPkICwUGALYB
CwUGACQBCwUGACkJmQUAAAAALQAAAAAAAQABAAEAEAAoBQkAOQABAAEAAAAQADgHlAdtAAEABgAA
ARAA4QeUB4EAAwAKAAMBAABFCAAAZQAEAA0AEQAXBXwBEQDbAYABEQDGAIQBBgZiAIgBVoA1CIsB
VoC7AYsBUCAAAAAAhgAuBQYAAQAoJQAAAACBAF4IjwEBAJQlAAAAAIEAcgiZAQYAaCYAAAAAgQBC
CaMBCgACJwAAAACGGPEGBgANAAonAAAAAIMY8QYGAA0AEicAAAAAkwhuBqsBDQA+JwAAAACTCMMB
sAENAEUnAAAAAJMIzwG1AQ0ATScAAAAAlgijCLsBDgBUJwAAAACGGPEGBgAOAFwnAAAAAJEY9wb/
AA4AAAABAE0BAAACAFgBAAADAGIBAAAEAAcEAAAFAAQGAAABAE0BAAACAFgBAAADAGcGAAAEAAQG
AAABAE0BAAACAFgBAAADAGcGAAABABkECQDxBgEAEQDxBgYAGQDxBgoAKQDxBhAAMQDxBhAAOQDx
BhAAQQDxBhAASQDxBhAAUQDxBhAAWQDxBhAAYQDxBhAAaQDxBgYA0QDxBgYA+QDxBhUACQHxBgYA
eQAVCUAAeQA+BEUAcQA9CEoAEQHKB1AAGQECBVYAIQHwA10A2QA+BGEAEQH9B2UAKQECBWsAEQGJ
BV0AMQHkBXIAOQGNCHcAQQHYB30AEQFTCIQASQFPBYoAOQGNCJUAiQDxBhAAUQEjBQYAWQHDB5wA
iQDiAKEAkQCECKsAcQHgCLEAuQDxBhAAcQHjBrUAmQDUCF0AeQECBboAOQFhBL8AOQFWBLEAOQFH
BMQAOQGNCMoAoQDxBtIAoQBZBtkAgQFzAd4AgQECBeMAOQG+AOgAiQHxBu4AkQEyCbEAOQGNCPUA
gQGRAPsAsQA6AgYAmQABCfsAmQGbCP8AmQEcCP8AoQEzBQMBqQEfBAgBEQGvCAEAoQGuAXcAqQEK
CQ4BsQGkARAAuQDWAGEASQHNBhQBiQENCB0BuQH6AyMBkQE7Bl0AyQEBACsBgQH2ADgBaQECBT0B
gQHqCLEAcQDxBgYA2QDxBgYA0QE2AUkB0QElCVIB4QDxBlgBAQHxBgYACAAUAHIBCAAYAHcBKQBz
APcBLgALAM8BLgATANgBLgAbAPcBLgAjAAACLgArACkCLgAzACkCLgA7ACkCLgBDAAACLgBLAC8C
LgBTACkCLgBbAEYCQwBjAHcBSQBzAPcBYQB7AHcBYwBrAHcBGwAwAUQBAwABAAQAAwAAAHIGwAEA
AOMBxQEAAKcIygECAAcAAwACAAgABQABAAkABQACAAoABwAEgAAAAQAAAE4jjHAAAAAAAAAJAAAA
BAAAAAAAAAAAAAAAYAGIAAAAAAAQAAAAAAAAAAAAAABpAWoEAAAAAAQAAAAAAAAAAAAAAGABagAA
AAAABAAAAAAAAAAAAAAAYAELBQAAAAAQAAAAAAAAAAAAAABpAUMAAAAAAAAAAAABAAAAQgcAAAUA
AgAAAABUb0ludDMyAFNUXzJiOWEzMmI4MTE1ZTRhZGJiMGUxMWUxNWFkZGUzNWM1ADxNb2R1bGU+
AEdDAFN5c3RlbS5JTwBNaWNyb3NvZnQuU3FsU2VydmVyLk1hbmFnZWREVFMAdmFsdWVfXwBTeXN0
ZW0uRGF0YQBTeXN0ZW0uRGF0YS5PbGVEYgBtc2NvcmxpYgBSZWFkAE9sZURiU2NoZW1hR3VpZABP
bGVEYkNvbW1hbmQAU3FsQ29tbWFuZABSZXBsYWNlAGRlZmF1bHRJbnN0YW5jZQBnZXRfTWVzc2Fn
ZQBHZXRPbGVEYlNjaGVtYVRhYmxlAEdldFNjaGVtYVRhYmxlAERhdGFUYWJsZQBWYXJpYWJsZQBJ
RGlzcG9zYWJsZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRsZQBGaWxlAHNjaGVt
YU5hbWUAdGFibGVOYW1lAHVuaXF1ZUNvbHVtbk5hbWUAR2V0TmFtZQBEYXRlVGltZQBNaWNyb3Nv
ZnQuU3FsU2VydmVyLkR0cy5SdW50aW1lAFdyaXRlTGluZQBDb21iaW5lAFR5cGUARmFpbHVyZQBn
ZXRfQ3VsdHVyZQBzZXRfQ3VsdHVyZQByZXNvdXJjZUN1bHR1cmUAVlNUQVJUU2NyaXB0T2JqZWN0
TW9kZWxCYXNlAEludGVybmFsRGF0YUNvbGxlY3Rpb25CYXNlAEFwcGxpY2F0aW9uU2V0dGluZ3NC
YXNlAERpc3Bvc2UARWRpdG9yQnJvd3NhYmxlU3RhdGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1
dGUARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRv
ckJyb3dzYWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVt
YXJrQXR0cmlidXRlAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRp
b25BdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4
YXRpb25zQXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdo
dEF0dHJpYnV0ZQBTU0lTU2NyaXB0VGFza0VudHJ5UG9pbnRBdHRyaWJ1dGUAQXNzZW1ibHlDb21w
YW55QXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAGdldF9WYWx1ZQBBZGRX
aXRoVmFsdWUAdW5pcXVlQ29sdW1uVmFsdWUAdmFsdWUATW92ZQBTeXN0ZW0uUnVudGltZS5WZXJz
aW9uaW5nAFRvU3RyaW5nAFN1YnN0cmluZwBQYXRoAGdldF9MZW5ndGgARW5kc1dpdGgATWljcm9z
b2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlRhc2tzLlNj
cmlwdFRhc2sAU2NyaXB0T2JqZWN0TW9kZWwAU3lzdGVtLkNvbXBvbmVudE1vZGVsAFNUXzJiOWEz
MmI4MTE1ZTRhZGJiMGUxMWUxNWFkZGUzNWM1LmRsbABnZXRfSXRlbQBTeXN0ZW0ARW51bQByZXNv
dXJjZU1hbgBPcGVuAFNjcmlwdE1haW4AR2V0RmlsZU5hbWVXaXRob3V0RXh0ZW5zaW9uAEZpcmVJ
bmZvcm1hdGlvbgBTeXN0ZW0uQ29uZmlndXJhdGlvbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBnZXRf
VHJhbnNhY3Rpb24AU3lzdGVtLlJlZmxlY3Rpb24AU3FsUGFyYW1ldGVyQ29sbGVjdGlvbgBEYXRh
Um93Q29sbGVjdGlvbgBPbGVEYkNvbm5lY3Rpb24AQWNxdWlyZUNvbm5lY3Rpb24AU3FsQ29ubmVj
dGlvbgBzcWxDb25uZWN0aW9uAEV4Y2VwdGlvbgBTeXN0ZW0uRGF0YS5Db21tb24AQ3VsdHVyZUlu
Zm8ARXhlY3V0ZVNjYWxhcgBPbGVEYkRhdGFSZWFkZXIARXhlY3V0ZVJlYWRlcgByZWFkZXIAZ2V0
X1Jlc291cmNlTWFuYWdlcgBDb25uZWN0aW9uTWFuYWdlcgBFdmVudHNPYmplY3RXcmFwcGVyAFNx
bFBhcmFtZXRlcgBTdHJlYW1Xcml0ZXIAVGV4dFdyaXRlcgBGaXJlRXJyb3IASUVudW1lcmF0b3IA
R2V0RW51bWVyYXRvcgAuY3RvcgAuY2N0b3IAU3lzdGVtLkRpYWdub3N0aWNzAFN5c3RlbS5SdW50
aW1lLkNvbXBpbGVyU2VydmljZXMAU3lzdGVtLlJlc291cmNlcwBTVF8yYjlhMzJiODExNWU0YWRi
YjBlMTFlMTVhZGRlMzVjNS5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJjZXMARGVidWdnaW5n
TW9kZXMAU1RfMmI5YTMyYjgxMTVlNGFkYmIwZTExZTE1YWRkZTM1YzUuUHJvcGVydGllcwBUYWJs
ZXMAZ2V0X1ZhcmlhYmxlcwBHZXRGaWxlcwBTZXR0aW5ncwBTeXN0ZW0uQ29sbGVjdGlvbnMAZ2V0
X0Nvbm5lY3Rpb25zAGdldF9QYXJhbWV0ZXJzAFdhaXRGb3JQZW5kaW5nRmluYWxpemVycwBTdWNj
ZXNzAGdldF9EdHMAU2NyaXB0UmVzdWx0cwBnZXRfRXZlbnRzAENoZWNrSWZSZWNvcmRFeGlzdHMA
RW5zdXJlVGFibGVFeGlzdHMAZ2V0X1Jvd3MAQ29uY2F0AE9iamVjdABDb2xsZWN0AGdldF9EZWZh
dWx0AHNldF9UYXNrUmVzdWx0AFN5c3RlbS5EYXRhLlNxbENsaWVudABnZXRfQ3VycmVudABnZXRf
Q291bnQAZ2V0X0ZpZWxkQ291bnQAQ29udmVydABNb3ZlTmV4dABDcmVhdGVUZXh0AGdldF9Ob3cA
RGF0YVJvdwBnZXRfQXNzZW1ibHkARXhlY3V0ZU5vblF1ZXJ5AEdlbmVyYXRlSW5zZXJ0UXVlcnkA
RGlyZWN0b3J5AAAdeQB5AHkAeQBNAE0AZABkAEgASABtAG0AcwBzAAAlVQBzAGUAcgA6ADoAUwBv
AHUAcgBjAGUARgBvAGwAZABlAHIAACdVAHMAZQByADoAOgBGAGkAbABlAEUAeAB0AGUAbgBzAGkA
bwBuAAAnVQBzAGUAcgA6ADoAQQByAGMAaABpAHYAZQBGAG8AbABkAGUAcgAAIVUAcwBlAHIAOgA6
AFMAYwBoAGUAbQBhAE4AYQBtAGUAAB9VAHMAZQByADoAOgBMAG8AZwBGAG8AbABkAGUAcgAAJ1kA
bwB1AHIAUwB0AGEAdABpAGMAVABhAGIAbABlAFQAZQBzAHQAAC1DAG8AbgBuAF8ARABCAF8AVABl
AGMAaABCAHIAbwB0AGgAZQByAHMASQBUAAADKgAAH1AAcgBvAGMAZQBzAHMAaQBuAGcAIABGAGkA
bABlAAAjUAByAG8AYwBlAHMAcwBpAG4AZwAgAGYAaQBsAGUAOgAgAAABAF1QAHIAbwB2AGkAZABl
AHIAPQBNAGkAYwByAG8AcwBvAGYAdAAuAEEAQwBFAC4ATwBMAEUARABCAC4AMQA2AC4AMAA7AEQA
YQB0AGEAIABTAG8AdQByAGMAZQA9AABdOwBFAHgAdABlAG4AZABlAGQAIABQAHIAbwBwAGUAcgB0
AGkAZQBzAD0AJwBFAHgAYwBlAGwAIAAxADIALgAwACAAWABtAGwAOwBIAEQAUgA9AFkARQBTADsA
JwABRU4AbwAgAHMAaABlAGUAdABzACAAZgBvAHUAbgBkACAAaQBuACAAdABoAGUAIABFAHgAYwBl
AGwAIABmAGkAbABlAC4AABVUAEEAQgBMAEUAXwBOAEEATQBFAAADJAAAIVAAcgBvAGMAZQBzAHMA
aQBuAGcAIABTAGgAZQBlAHQAACVQAHIAbwBjAGUAcwBzAGkAbgBnACAAcwBoAGUAZQB0ADoAIAAA
NyAAYQBuAGQAIABpAG4AcwBlAHIAdABpAG4AZwAgAGkAbgB0AG8AIAB0AGEAYgBsAGUAOgAgAAAf
UwBFAEwARQBDAFQAIAAqACAARgBSAE8ATQAgAFsAAAUkAF0AAAMnAAEFJwAnAAEhRAB1AHAAbABp
AGMAYQB0AGUAIABSAGUAYwBvAHIAZAAAGVIAZQBjAG8AcgBkACAAdwBpAHQAaAAgAAAHIAA9ACAA
ACEgAGEAbAByAGUAYQBkAHkAIABlAHgAaQBzAHQAcwAuAAADXAAAA18AABNFAHIAcgBvAHIATABv
AGcAXwAACS4AbABvAGcAADVFAHIAcgBvAHIAIABpAG4AIABFAHgAYwBlAGwAIAB0AG8AIABTAFEA
TAAgAFQAYQBzAGsAAA9FAHIAcgBvAHIAOgAgAAAhLgAgAFMAZQBlACAAbABvAGcAIABmAGkAbABl
ADoAIAAALVMARQBMAEUAQwBUACAAQwBPAFUATgBUACgAMQApACAARgBSAE8ATQAgAFsAAAddAC4A
WwAAE10AIABXAEgARQBSAEUAIABbAAAhXQAgAD0AIABAAFUAbgBpAHEAdQBlAFYAYQBsAHUAZQAA
GUAAVQBuAGkAcQB1AGUAVgBhAGwAdQBlAACAm0kARgAgAE4ATwBUACAARQBYAEkAUwBUAFMAIAAo
AFMARQBMAEUAQwBUACAAKgAgAEYAUgBPAE0AIABJAE4ARgBPAFIATQBBAFQASQBPAE4AXwBTAEMA
SABFAE0AQQAuAFQAQQBCAEwARQBTACAAVwBIAEUAUgBFACAAVABBAEIATABFAF8AUwBDAEgARQBN
AEEAIAA9ACAAJwABKScAIABBAE4ARAAgAFQAQQBCAEwARQBfAE4AQQBNAEUAIAA9ACAAJwABLycA
KQAgAEIARQBHAEkATgAgAEMAUgBFAEEAVABFACAAVABBAEIATABFACAAWwABB10AIAAoAAAVQwBv
AGwAdQBtAG4ATgBhAG0AZQAAA1sAAB9dACAATgBWAEEAUgBDAEgAQQBSACgATQBBAFgAKQAABSwA
IAAACykAIABFAE4ARAAAG0kATgBTAEUAUgBUACAASQBOAFQATwAgAFsAABVdACAAVgBBAEwAVQBF
AFMAIAAoAAADKQAAcVMAVABfADIAYgA5AGEAMwAyAGIAOAAxADEANQBlADQAYQBkAGIAYgAwAGUA
MQAxAGUAMQA1AGEAZABkAGUAMwA1AGMANQAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBv
AHUAcgBjAGUAcwAA9mTcDOivskCtA/4NVHOT8wAEIAEBCAMgAAEFIAEBEREEIAEBDgUgAQEReSQH
Fw4CET0ODg4OEkEdDggOEkUSSRJNDhJRElUODhJZEl0OEmEEAAARPQQgAQ4OBSAAEoCJBSAAEoCN
BiABEoCRHAMgABwDIAAOBSAAEoCVBiABEoCZHAQgARwcBQACDg4OBgACHQ4ODgUgABKApQogBgEI
Dg4OCBACBgADDg4ODgQGEYCxCSACEkkRgLEdHAUgABKAtQMgAAgEIAASTQQgARwOBCABAg4FIAIO
CAgHAAQODg4ODgYgAgEOEkUEIAASVQQgAQ4IBCABHAgFIAIODg4GIAIBDhJBBQABDh0OAyAAAgMA
AAEEAAEODgUAAgEODgUAARJhDgggBQIIDg4OCAUgABKA3QcgAhKA4Q4cBAABCBwHBwQOEkkIDgQg
ABJJBiABEoC9CAQHAg4ICAABEoDpEYDtBSAAEoDxByACAQ4SgPEIt3pcVhk04IkIiYRdzYCAzJEE
AAAAAAQBAAAAAwYScQMGEnUDBhIQAgYIAwYRFAkgBQIODg4OEkEJIAQBDg4SVRJBByADDg4OElUE
AAAScQQAABJ1BQABARJ1BAAAEhAECAAScQQIABJ1BAgAEhAIAQAIAAAAAAAeAQABAFQCFldyYXBO
b25FeGNlcHRpb25UaHJvd3MBCAEAAgAAAAAAKAEAI1NUXzJiOWEzMmI4MTE1ZTRhZGJiMGUxMWUx
NWFkZGUzNWM1AAAFAQAAAAAWAQARQ29weXJpZ2h0IEAgIDIwMjQAAEkBABouTkVURnJhbWV3b3Jr
LFZlcnNpb249djQuNwEAVA4URnJhbWV3b3JrRGlzcGxheU5hbWUSLk5FVCBGcmFtZXdvcmsgNC43
tAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2Nvcmxp
YiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1
YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAA
AABQQURQQURQtAAAAJxBAAAAAAAAAAAAALZBAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAACoQQAA
AAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABABAA
AAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAAWGAA
ABoEAAAAAAAAAAAAABoENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+
AAABAAAAAQCMcE4jAAABAIxwTiM/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEAVgBh
AHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAAAAAA
sAR6AwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAABWAwAAAQAwADAAMAAwADAANABi
ADAAAAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABhAG4AeQBOAGEA
bQBlAAAAAAAAAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAVABf
ADIAYgA5AGEAMwAyAGIAOAAxADEANQBlADQAYQBkAGIAYgAwAGUAMQAxAGUAMQA1AGEAZABkAGUA
MwA1AGMANQAAAD4ADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA5ADAAMwA4
AC4AMgA4ADgAMQAyAAAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAVABfADIA
YgA5AGEAMwAyAGIAOAAxADEANQBlADQAYQBkAGIAYgAwAGUAMQAxAGUAMQA1AGEAZABkAGUAMwA1
AGMANQAuAGQAbABsAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAA
eQByAGkAZwBoAHQAIABAACAAIAAyADAAMgA0AAAAKgABAAEATABlAGcAYQBsAFQAcgBhAGQAZQBt
AGEAcgBrAHMAAAAAAAAAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAA
UwBUAF8AMgBiADkAYQAzADIAYgA4ADEAMQA1AGUANABhAGQAYgBiADAAZQAxADEAZQAxADUAYQBk
AGQAZQAzADUAYwA1AC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAFMA
VABfADIAYgA5AGEAMwAyAGIAOAAxADEANQBlADQAYQBkAGIAYgAwAGUAMQAxAGUAMQA1AGEAZABk
AGUAMwA1AGMANQAAAEIADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4A
OQAwADMAOAAuADIAOAA4ADEAMgAAAAAARgAPAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBp
AG8AbgAAADEALgAwAC4AOQAwADMAOAAuADIAOAA4ADEAMgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAwAAADIMQAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="134,42"
          Id="Package\Script Task"
          TopLeft="522,63" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>